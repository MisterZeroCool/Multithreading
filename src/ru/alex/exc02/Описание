                                Реализация интерфейса Runnable.
    Самый простой способ создать поток исполнения это объявить класс реализующий интерфейс
Runnable. Этот интерфейс представляет абстракцию единицы исполняемого кода. Поток исполне-
ния можно создать из объекта любого класса, реализующего интерфейс Runnable. Для реализации
интерфейса Runnable в классе должен быть объявлен единственный метод run().
    В теле метода run() определяется код, который, собственно, и составляет новый поток ис-
полнения. Однако в методе run() можно вызвать другие методы, использовать другие классы,
объявлять переменные таким же образом, как  и в главном потоке исполнения. Единственное отли-
чие заключается в том, что в методе run() устанавливается точка входа в другой, параллельный
поток исполнения в программе. Этот поток исполнения завершается, когда метод run() возвратит
управление.
    После создания класса, реализующего интерфейс Runnable, в этом классе следует получить
экземпляр объекта типа Thread.

Thread(Runnable объект_потока, String имя_потока)
    Параметр объект_потока обозначает экземпляр класса, реализующего интерфейс Runnable. Этим
определяется место, где начинается выполнение потока. Имя нового потока исполнения передается
данному конструктору в качестве параметра имя_потока.
    После того как новый поток исполнения будет создан, он не запускается до тех пор, пока не
будет вызван метод start(), объявленный в классе Thread. По суще­ству, в методе start() вызыва-
ется метод run().

ПРИМЕР.
    В данном примере демонстрируется создание и запуск нового потока на выполнение.
    Новый объект класса Thread создается в следующем операторе из конструкто­ра NewThread():
    t = new Thread(this, "Демонстрационный поток");
    Передача ссылки t h i s на текущий объект в первом аргументе данного конструк­тора означает
следующее: в новом потоке исполнения для текущего объекта по ссылке this следует вызвать метод
run(). Далее в приведенном примере программы вызывается метод start(), в результате чего поток
исполнения запускается, начиная с метода run(). Это, в свою очередь, приводит к началу цикла
for в дочернем потоке исполнения. После вызова метода start() конструктор NewThread() возвращает
управление методу main(). Возобновляя свое исполнение, главный поток входит в свой цикл for.
Далее потоки выполняются параллельно, совместно используя ресурсы процессора в одноядерной сис-
теме, вплоть до завершения своих циклов. Результат, выводимый данной программой (у вас он может
оказатьсяиным в зависимости от конкретной исполняющей среды).

Дочерний поток создан: Thread[Демонстрационный поток,5,main]
Главный поток: 5
Дочерний поток: 5
Дочерний поток: 4
Главный поток: 4
Дочерний поток: 3
Дочерний поток: 2
Главный поток: 3
Дочерний поток: 1
Дочерний поток завершен.
Главный поток: 2
Главный поток: 1
Главный поток завершен.

    Если главный поток завершится раньше дочернего потока, то исполняющая система Java можеи за-
виснуть.