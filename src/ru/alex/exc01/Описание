                        Главный поток исполнения.
    Когда программа на Java запускается на выполнение, сразу же начинает выполняться один поток,
он называется  г л а в н ы м потоком программы. Главный поток исполнения важен по двум причинам.
- От этого потока исполнения пораждаются все дочерние потоки.
- Зачастую он должен быть последним потоком, завершающим выполнение программы, поскольку в нем
  производятся различные завершающие действия.
    Главный поток может управляться через объект класса Thread. Для этого достаточно получить
ссылку на него, вызвав метод currentThread().
    Этот метод возвращает ссылку на тот поток исполнения, из которого он был вызван.Получив ссылку
на главный поток, можно управлять им таким же образом, как и любым другим потоком исполнения.

ПРИМЕР.
    В этом примере программы ссылка на текущий поток исполнения получается в результате вызова ме-
тода currentThread() и сохраняется в локальной переменной t. Затем выводятся сведения о потоке ис-
полнения. Далее вызывается метод setName() для изменения внугреннего имени потока исполнения. После
этого сведения о потоке исполнения выводятся заново. А в следующем далее цикле выводятся цифры в
обратном порядке с задержкой на 1 секунду после каждой строки. Пауза организуется с помощью метода
sleep(). Аргумент метода sleep() задает время задержки в миллисекундах. Метод sleep() из класса
Thread может сгенерировать исключение типа InterruptException, если в каком-нибудь другом потоке ис-
полнения потребуется прервать ожидающий поток, по этому он находится в блоке операторов try/catch.

