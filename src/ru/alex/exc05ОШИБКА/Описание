                            Применение методов isAlive() и join().
    Нередко требуется, чтобы главный поток исполнения завершался последним. С этой целью
метод sleep() вызывался в предыдущих примерах из метода main() с достаточной задержкой,
чтобы все дочерние потоки исполнения завершились раньше главного. Но это неудовлетворитель-
ное решение, вызывающее следующий серьезный вопрос: откуда одному потоку исполне­ния извест-
но, что другой поток завершился? Правда, в классе Thread предостав­ляется средство, позволя-
ющее разрешить этот вопрос.
    Определить, был ли поток исполнения завершен, можно двумя способами.

    Во-первых вызвать метод isAlive(), определенный в классе Thread. Данный метод возвращает
логическое значение true, если поток, для которого он вызван, еще исполняется. В противном
случае он возвращает логическое значение false.

    Во-вторых, в классе Thread имеется метод join(), который применяется чаще, чем метод
isAlive(), чтобы дождаться завершения потока исполнения. Этот метод ожидает завершения пртока
исполнения, для которого он вызван. Его имя отражает следующий принцип: вызывающий поток ожи-
дает, когда указанный поток  п р и с о е д и н и т с я к нему. Дополнительные формы метода
join(), позволяют указать максимальный промежуток времени, в течение которого требуется ожидать
завершения указанного потока исполнения.

ПРОГРАММА.
    Усовершенствованная программа из предыдущего примера, где с помощью join() гарантируется,
что главный поток завершится последним. В данном примере демонстрируется также применение метода
isAlive().

    Результат выводимый данной программой.

Новый поток: Thread[One,5,main]
Новый поток: Thread[Two,5,main]
One: 5
Новый поток: Thread[Three,5,main]
Two: 5
Поток One запущен: true
Поток Two запущен: true
Three: 5
Поток Three запущен: true
Ожидание завершения потоков.
One: 4
Three: 4
Two: 4
One: 3
Three: 3
Two: 3
One: 2
Two: 2
Three: 2
Three: 1
One: 1
Two: 1
Two завершен.
One завершен.
Three завершен.
Поток One запущен: false
Поток Two запущен: false
Поток Three запущен: false
Главный поток завершен.

    Потоки прекращают исполнение после того, как вызовы метода join() возвращают управление.